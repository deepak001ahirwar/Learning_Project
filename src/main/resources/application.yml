server:
  port: ${SERVER_PORT:8089}

spring:
  h2:
    console:
      enabled: true

  application:
    name: ${APPLICATION_NAME:learning-app}
  datasource:
    mysql:
      jdbc-url: jdbc:mysql://localhost:3306/learning_app
      username: root
      password: Rawcubes@001
      driver-class-name: com.mysql.cj.jdbc.Driver

    h2:
      jdbc-url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
      username: sa
      password:
      driver-class-name: org.h2.Driver
#      type: com.zaxxer.hikari.HikariDataSource
#      hikari:
#        minimum-idle: ${CONNECTION_MIN_IDLE:20}
#        idle-timeout: 600000
#        maximum-pool-size: ${CONNECTION_MAX:100}
#        auto-commit: true
#        pool-name: HikariCorePool
#        max-lifetime: 1800000
#        connection-timeout: ${CONNECTION_TIMEOUT:30000}
#    jpa:
#        generate-ddl: false
#        hibernate:
#          ddl-auto: update
#        show-sql: true
#        properties:
#          hibernate.dialect: org.hibernate.spatial.dialect.mysql.MySQL56SpatialDialect
#          hibernate.session.events.log.LOG_QUERIES_SLOWER_THAN_MS: ${LOG_QUERY_SLOW_MS:10}

eureka:
      client:
        service-url:
          defaultZone: http://${EUREKA_HOST:localhost}:${EUREKA_PORT:8761}/eureka
      instance:
        hostname: ${EUREKA_HOST:localhost}
        prefer-ip-address: true


##### Spring  Cloud Gateway rate limit Config ########
#spring:
#      cloud:
#        gateway:
#          routes:
#            - id: limit_rate_route
#              uri: http://localhost:8089
#              predicates:
#                - Path=/api/cloud/limit/**
#              filters:
#                - name: RequestRateLimiter
#                  args:
#                    redis-rate-limiter.replenishRate: 2     # 2 requests per second
#                    redis-rate-limiter.burstCapacity: 5     # max burst of 5
#                    #                key-resolver: "#{@ipKeyResolver}"        # required for limiting per client
#                    redis-rate-limiter.requestedTokens: 1


#resilience4j
resilience4j.ratelimiter:
  instances:
    backendA:
      limitForPeriod: 2
      limitRefreshPeriod: 2s
      timeoutDuration: 0s
      registerHealthIndicator: true
      eventConsumerBufferSize: 100

logging:
  level:
    root: ${LOGGING_LEVEL:debug}
